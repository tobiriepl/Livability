library(sf) # standard paket f端r vektor geodaten in R    # spatial formation package
library(osmdata)
library(tidyverse)
library(mapview) # interkative, schnelle karten
library(ggthemes) # pretty ggplots
library(here)
library(glue)
library(jsonlite)
library(hereR)
library(readr)
library(ggthemes)   # to get theme map from tom
# data --------------------------------------------------------------------
care_points = read_sf("Data/Care/care_points.geojson")
data_zbez = read_sf("Data/Census Districts/ZAEHLBEZIRKOGDPolygon.shp")
data_iso = read_sf(here("Data/Isochrones/Isochrones.geojson"))
# f端r jeden zbez ----------------------------------------------------------
cents = st_centroid(data_zbez)
isochrones=c(15)
apiKey = readLines(here("Data/API/api.txt"))
set_key(api_key = apiKey)
result = map(1:250, function(i){
cat(glue(i, "/", 250, "\r"))
# zbez nr i (zeilennummer)
# centroid
row = cents[i,]
# zbez
zbez = data_zbez[i, ]
# ISOCHRONE
times = isochrones *60 # time in seconds
iso = hereR::isoline(        # use hereR package to send API request
row,
datetime = Sys.time(),
range = times,
range_type = "time",
transport_mode = "pedestrian"
)
# find points in zbez, similar to: st_intersection(data_points, zbez)
care_in_zbez = care_points[zbez, ] %>%
mutate(
inZbez = TRUE
)
# find points in isochrone
care_in_isochrone = care_points[iso, ] %>%
mutate(
inZbez = FALSE
)
#  in isochrone, aber nicht in zbez
care_in_iso_but_no_zbez = anti_join(care_in_isochrone, care_in_zbez %>% st_drop_geometry(), join_by(name))
# in zbez + in isochrone (aber nicht in zbez)
care_iso_zbez = bind_rows(care_in_zbez, care_in_iso_but_no_zbez)
# um welchen zbez handelt es sich
care_iso_zbez[["zbez"]] = zbez[["ZBEZ"]]
# mapview(care_iso_zbez, zcol="inZbez")
# weights
care_iso_zbez |>
st_drop_geometry() |>
group_by(zbez, inZbez, amenity) |>
summarise(
n_amenities = n()
) |>
pivot_wider(        # make long to wide!
names_from = c("inZbez", "amenity"),
values_from = "n_amenities"
) -> final
return(final)
})
result = map(1:250, function(i){
cat(glue(i, "/", 250, "\r"))
# zbez nr i (zeilennummer)
# centroid
row = cents[i,]
# zbez
zbez = data_zbez[i, ]
# ISOCHRONE
times = isochrones *60 # time in seconds
iso = hereR::isoline(        # use hereR package to send API request
row,
datetime = Sys.time(),
range = times,
range_type = "time",
transport_mode = "pedestrian"
)
# find points in zbez, similar to: st_intersection(data_points, zbez)
care_in_zbez = care_points[zbez, ] %>%
mutate(
inZbez = TRUE
)
# find points in isochrone
care_in_isochrone = care_points[iso, ] %>%
mutate(
inZbez = FALSE
)
#  in isochrone, aber nicht in zbez
care_in_iso_but_no_zbez = anti_join(care_in_isochrone, care_in_zbez %>% st_drop_geometry(), join_by(name))
# in zbez + in isochrone (aber nicht in zbez)
care_iso_zbez = bind_rows(care_in_zbez, care_in_iso_but_no_zbez)
# um welchen zbez handelt es sich
care_iso_zbez[["zbez"]] = zbez[["ZBEZ"]]
# mapview(care_iso_zbez, zcol="inZbez")
# weights
care_iso_zbez |>
st_drop_geometry() |>
group_by(zbez, inZbez, amenity) |>
summarise(
n_amenities = n()
) |>
pivot_wider(        # make long to wide!
names_from = c("inZbez", "amenity"),
values_from = "n_amenities"
) -> final
return(final)
})
# f端r jeden zbez ----------------------------------------------------------
cents = st_centroid(data_zbez)
isochrones=c(15)
apiKey = readLines(here("Data/API/api.txt"))
library(sf) # standard paket f端r vektor geodaten in R    # spatial formation package
library(osmdata)
library(tidyverse)
library(mapview) # interkative, schnelle karten
library(ggthemes) # pretty ggplots
library(here)
library(glue)
library(jsonlite)
library(hereR)
library(readr)
library(ggthemes)   # to get theme map from tom
# data --------------------------------------------------------------------
care_points = read_sf("Data/Care/care_points.geojson")
# data --------------------------------------------------------------------
care_points = read_sf("Data/Care/care_points.geojson")
setwd()
getwd()
